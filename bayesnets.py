# -*- coding: utf-8 -*-
"""BayesNets.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/185RJuqvZHP0asm-mjb8Cth3N9ot2XFGo
"""

import dataclasses
import numpy as np

from typing import Dict, List, Optional, TypeVar, Tuple, Union

"""# Representation"""

@dataclasses.dataclass
class Probability:
    value: float
        
@dataclasses.dataclass
class ConditionalProb(Probability):
    condition: str
    value: Tuple[Probability, Probability]

@dataclasses.dataclass
class BoolNode:
    name: str
    cpt: Probability

"""# Network Definition"""

cloudy = BoolNode(name='Cloudy', cpt=Probability(value=0.5))
sprinkler = BoolNode(
    name='Sprinkler', 
    cpt=ConditionalProb(condition='Cloudy', value=(Probability(value=0.1), Probability(value=0.5)))
)
rain = BoolNode(
    name='Rain', 
    cpt=ConditionalProb(condition='Cloudy', value=(Probability(value=0.8), Probability(value=0.2)))
)
wetgrass = BoolNode(
    name='WetGrass', 
    cpt=ConditionalProb(condition='Sprinkler',
                        value=(
                            ConditionalProb(condition='Rain',
                                            value=(Probability(value=0.99), Probability(value=0.9))),
                            ConditionalProb(condition='Rain',
                                            value=(Probability(value=0.9), Probability(value=0.01)))
                            ))
)

nodes = [cloudy, sprinkler, rain, wetgrass]
node_dict: Dict[str, BoolNode] = {n.name: n for n in nodes}
get_cond = lambda x: list(set([x.condition] + [v for c in x.value for v in get_cond(c)])) if isinstance(x, ConditionalProb) else []
network: Dict[str, List[str]] = {n.name: get_cond(n.cpt) for n in nodes}

node_dict

network

get_cond(wetgrass.cpt)

"""# Direct Prior Sampling"""

samples = []

for _ in range(10):
    s = {}
    for n in nodes:
        rnd = np.random.rand()
        node = node_dict[n.name]
        if len(network[n.name]) == 0:
            s[n.name] = True if rnd < node.cpt.value else False
        else:
            get_val = lambda x: (x.value[0] if s[x.condition] else x.value[1]) if isinstance(x.value, tuple) else x.value
            
            val = node.cpt
            while not isinstance(val, float):
                val = get_val(val)
                
            s[n.name] = True if rnd < val else False
    print(s)